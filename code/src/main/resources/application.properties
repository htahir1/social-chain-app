#
#
#spring.datasource.url=jdbc:postgresql://localhost:5432/navvismachinelearningdb
#spring.datasource.username=postgres
#spring.datasource.password=postgres
#
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#



# ===============================
# = DATA SOURCE
# ===============================


spring.data.rest.default-page-size=20
spring.data.rest.basePath = /partytimeline/api/v1

# Set here configurations for the database connection

# Local
# spring.datasource.url=jdbc:postgresql://localhost:5433/partytimeline_db
# Remote
spring.datasource.url=jdbc:postgresql://partytimeline.cstmqefvhsvd.us-west-2.rds.amazonaws.com:5432/partytimeline_db
# server.port = 8070
spring.jpa.database=POSTGRESQL

# Username and password
# Local stuff
#spring.datasource.username = postgres
#spring.datasource.password = admin

# Remote stuff
spring.datasource.username = nomads
spring.datasource.password = partytimeline

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = create

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy


# ===============================
# = SECURITY
# ===============================
security.basic.enabled=false
management.security.enabled=false
